version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    container_name: team-report-db-dev
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-teamreport}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-teamreport123}
      POSTGRES_DB: ${POSTGRES_DB:-team_report}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
    networks:
      - team-report-network-dev
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-teamreport}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API (Development mode with hot reload)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: team-report-backend-dev
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-teamreport}:${POSTGRES_PASSWORD:-teamreport123}@postgres:5432/${POSTGRES_DB:-team_report}
      PORT: ${BACKEND_PORT:-5000}
      NODE_ENV: development
    ports:
      - "${BACKEND_PORT:-5000}:5000"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - /app/node_modules
    networks:
      - team-report-network-dev
    command: sh -c "npx prisma db push --accept-data-loss && npm run dev"

  # Frontend React App (Development mode with hot reload)
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: team-report-frontend-dev
    restart: unless-stopped
    environment:
      VITE_API_URL: ${VITE_API_URL:-http://localhost:5000/api}
    ports:
      - "${FRONTEND_PORT:-5173}:5173"
    depends_on:
      - backend
    volumes:
      - .:/app
      - /app/node_modules
    networks:
      - team-report-network-dev
    command: npm run dev

networks:
  team-report-network-dev:
    driver: bridge

volumes:
  postgres_data_dev:
    driver: local
