generator client {
  provider      = "prisma-client-js"
  output        = "../src/generated/prisma"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Dev {
  id            Int                      @id @default(autoincrement())
  name          String
  color         String
  role          String
  seniority     String
  lastWeek      String?                  @map("last_week")
  thisWeek      String?                  @map("this_week")
  nextWeek      String?                  @map("next_week")
  createdAt     DateTime                 @default(now()) @map("created_at")
  updatedAt     DateTime                 @updatedAt @map("updated_at")
  timelineTasks TimelineTaskAssignment[]

  @@index([role])
  @@index([seniority])
  @@map("devs")
}

model Demand {
  id            String         @id @default(uuid())
  category      String
  title         String
  status        String
  priority      String
  stage         String
  assignedDevs  String[]       @map("assigned_devs")
  value         String?
  details       String?
  links         String[]
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  highlights    Highlight[]
  timelineTasks TimelineTask[]

  @@index([category])
  @@index([status])
  @@index([stage])
  @@map("demands")
}

model Delivery {
  id        String   @id @default(uuid())
  title     String
  valueType String?  @map("value_type")
  items     String[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("deliveries")
}

model Highlight {
  id              String        @id @default(uuid())
  type            String
  text            String
  severity        String?
  achievementDate DateTime?     @map("achievement_date")
  demandId        String?       @map("demand_id")
  timelineTaskId  String?       @map("timeline_task_id")
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")
  demand          Demand?       @relation(fields: [demandId], references: [id])
  timelineTask    TimelineTask? @relation(fields: [timelineTaskId], references: [id], onDelete: Cascade)

  @@index([type])
  @@index([demandId])
  @@index([timelineTaskId])
  @@index([createdAt])
  @@map("highlights")
}

model TimelineTask {
  id           String                   @id @default(uuid())
  weekStart    DateTime                 @map("week_start")
  weekEnd      DateTime                 @map("week_end")
  title        String
  status       String                   @default("nao-iniciada")
  createdAt    DateTime                 @default(now()) @map("created_at")
  updatedAt    DateTime                 @updatedAt @map("updated_at")
  demandId     String?                  @map("demand_id")
  highlights   Highlight[]
  assignedDevs TimelineTaskAssignment[]
  demand       Demand?                  @relation(fields: [demandId], references: [id], onDelete: Cascade)

  @@index([weekStart])
  @@index([weekEnd])
  @@index([demandId])
  @@index([status])
  @@map("timeline_tasks")
}

model TimelineTaskAssignment {
  id             String       @id @default(uuid())
  timelineTaskId String       @map("timeline_task_id")
  devId          Int          @map("dev_id")
  createdAt      DateTime     @default(now()) @map("created_at")
  dev            Dev          @relation(fields: [devId], references: [id], onDelete: Cascade)
  timelineTask   TimelineTask @relation(fields: [timelineTaskId], references: [id], onDelete: Cascade)

  @@unique([timelineTaskId, devId])
  @@index([timelineTaskId])
  @@index([devId])
  @@map("timeline_task_assignments")
}

model Config {
  key       String   @id
  value     Json
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("config")
}
