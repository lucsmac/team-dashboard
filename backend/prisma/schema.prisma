generator client {
  provider      = "prisma-client-js"
  output        = "../src/generated/prisma"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Dev {
  id              Int                      @id @default(autoincrement())
  name            String
  color           String
  role            String
  seniority       String
  lastWeek        String?                  @map("last_week")
  thisWeek        String?                  @map("this_week")
  nextWeek        String?                  @map("next_week")
  weeklyCapacity  Int                      @default(40) @map("weekly_capacity")
  createdAt       DateTime                 @default(now()) @map("created_at")
  updatedAt       DateTime                 @updatedAt @map("updated_at")
  timelineTasks   TimelineTaskAssignment[]
  weekAllocations DevWeekAllocation[]

  @@index([role])
  @@index([seniority])
  @@map("devs")
}

model Demand {
  id            String         @id @default(uuid())
  category      String
  title         String
  status        String
  priority      String
  stage         String
  assignedDevs  String[]       @map("assigned_devs")
  value         String?
  details       String?
  links         String[]
  completedAt   DateTime?      @map("completed_at")
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  highlights    Highlight[]
  timelineTasks TimelineTask[]

  @@index([category])
  @@index([status])
  @@index([stage])
  @@index([completedAt])
  @@map("demands")
}

model Delivery {
  id        String   @id @default(uuid())
  title     String
  valueType String?  @map("value_type")
  items     String[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("deliveries")
}

model Highlight {
  id              String        @id @default(uuid())
  type            String
  text            String
  severity        String?
  achievementDate DateTime?     @map("achievement_date")
  weekStart       DateTime?     @map("week_start")
  weekEnd         DateTime?     @map("week_end")
  devIds          Int[]         @map("dev_ids")
  resolved        Boolean       @default(false)
  resolvedAt      DateTime?     @map("resolved_at")
  demandId        String?       @map("demand_id")
  timelineTaskId  String?       @map("timeline_task_id")
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")
  demand          Demand?       @relation(fields: [demandId], references: [id])
  timelineTask    TimelineTask? @relation(fields: [timelineTaskId], references: [id], onDelete: Cascade)

  @@index([type])
  @@index([demandId])
  @@index([timelineTaskId])
  @@index([createdAt])
  @@index([weekStart])
  @@index([weekEnd])
  @@index([resolved])
  @@map("highlights")
}

model TimelineTask {
  id           String                   @id @default(uuid())
  weekStart    DateTime                 @map("week_start")
  weekEnd      DateTime                 @map("week_end")
  title        String
  status       String                   @default("nao-iniciada")
  createdAt    DateTime                 @default(now()) @map("created_at")
  updatedAt    DateTime                 @updatedAt @map("updated_at")
  demandId     String?                  @map("demand_id")
  highlights   Highlight[]
  assignedDevs TimelineTaskAssignment[]
  demand       Demand?                  @relation(fields: [demandId], references: [id], onDelete: Cascade)

  @@index([weekStart])
  @@index([weekEnd])
  @@index([demandId])
  @@index([status])
  @@map("timeline_tasks")
}

model TimelineTaskAssignment {
  id             String       @id @default(uuid())
  timelineTaskId String       @map("timeline_task_id")
  devId          Int          @map("dev_id")
  createdAt      DateTime     @default(now()) @map("created_at")
  dev            Dev          @relation(fields: [devId], references: [id], onDelete: Cascade)
  timelineTask   TimelineTask @relation(fields: [timelineTaskId], references: [id], onDelete: Cascade)

  @@unique([timelineTaskId, devId])
  @@index([timelineTaskId])
  @@index([devId])
  @@map("timeline_task_assignments")
}

model Config {
  key       String   @id
  value     Json
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("config")
}

model DevWeekAllocation {
  id                String   @id @default(uuid())
  devId             Int      @map("dev_id")
  weekStart         DateTime @map("week_start")
  weekEnd           DateTime @map("week_end")
  allocationType    String   @map("allocation_type")
  allocationPercent Int      @default(100) @map("allocation_percent")
  notes             String?
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  dev Dev @relation(fields: [devId], references: [id], onDelete: Cascade)

  @@unique([devId, weekStart, allocationType])
  @@index([devId])
  @@index([weekStart])
  @@index([allocationType])
  @@map("dev_week_allocations")
}

model JiraIntegration {
  id         String    @id @default(uuid())
  name       String    @unique
  jiraUrl    String    @map("jira_url")
  projectKey String    @map("project_key")
  boardId    String    @map("board_id")
  apiToken   String    @map("api_token")
  email      String
  isActive   Boolean   @default(true) @map("is_active")
  lastSyncAt DateTime? @map("last_sync_at")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")

  @@index([name])
  @@index([isActive])
  @@map("jira_integrations")
}

model JiraIssue {
  id                   String    @id @default(uuid())
  jiraIssueId          String    @map("jira_issue_id")
  jiraIssueKey         String    @unique @map("jira_issue_key")
  integrationName      String    @map("integration_name")
  summary              String
  description          String?
  issueType            String    @map("issue_type")
  status               String
  priority             String?
  assigneeEmail        String?   @map("assignee_email")
  assigneeName         String?   @map("assignee_name")
  assignedDevId        Int?      @map("assigned_dev_id")
  createdAt            DateTime  @map("created_at")
  updatedAt            DateTime  @map("updated_at")
  resolutionDate       DateTime? @map("resolution_date")
  timeToFirstResponse  Int?      @map("time_to_first_response")
  timeInProgress       Int?      @map("time_in_progress")
  timeToResolution     Int?      @map("time_to_resolution")
  estimatedHours       Float?    @map("estimated_hours")
  loggedHours          Float?    @map("logged_hours")
  complexity           String?
  storyPoints          Int?      @map("story_points")
  labels               String[]
  components           String[]
  lastSyncedAt         DateTime  @default(now()) @map("last_synced_at")

  @@index([integrationName])
  @@index([status])
  @@index([assigneeEmail])
  @@index([assignedDevId])
  @@index([createdAt])
  @@index([resolutionDate])
  @@map("jira_issues")
}
